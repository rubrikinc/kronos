// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kronos.proto

package kronospb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ServerStatus int32

const (
	// Server is not the oracle and has not synced with the oracle
	// It cannot respond to KronosTime requests
	ServerStatus_NOT_INITIALIZED ServerStatus = 0
	// Server is the oracle or has synced with any oracle
	// It can respond to KronosTime requests if it is the current oracle.
	// KronosTime of initialized servers are valid
	ServerStatus_INITIALIZED ServerStatus = 1
)

var ServerStatus_name = map[int32]string{
	0: "NOT_INITIALIZED",
	1: "INITIALIZED",
}
var ServerStatus_value = map[string]int32{
	"NOT_INITIALIZED": 0,
	"INITIALIZED":     1,
}

func (x ServerStatus) String() string {
	return proto.EnumName(ServerStatus_name, int32(x))
}
func (ServerStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_kronos_ba22e8fb849086dc, []int{0}
}

type NodeAddr struct {
	// Host of the node address
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Port of the node address
	Port                 string   `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeAddr) Reset()         { *m = NodeAddr{} }
func (m *NodeAddr) String() string { return proto.CompactTextString(m) }
func (*NodeAddr) ProtoMessage()    {}
func (*NodeAddr) Descriptor() ([]byte, []int) {
	return fileDescriptor_kronos_ba22e8fb849086dc, []int{0}
}
func (m *NodeAddr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeAddr.Unmarshal(m, b)
}
func (m *NodeAddr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeAddr.Marshal(b, m, deterministic)
}
func (dst *NodeAddr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeAddr.Merge(dst, src)
}
func (m *NodeAddr) XXX_Size() int {
	return xxx_messageInfo_NodeAddr.Size(m)
}
func (m *NodeAddr) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeAddr.DiscardUnknown(m)
}

var xxx_messageInfo_NodeAddr proto.InternalMessageInfo

func (m *NodeAddr) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *NodeAddr) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type OracleState struct {
	// Current id. This is used for CAS operations
	// id is a sequence
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Upper bound to time generated by Kronos
	TimeCap int64 `protobuf:"varint,2,opt,name=time_cap,json=timeCap,proto3" json:"time_cap,omitempty"`
	// Address of current oracle
	Oracle *NodeAddr `protobuf:"bytes,3,opt,name=oracle,proto3" json:"oracle,omitempty"`
	// Upper bound to time generated by Kronos Uptime
	KronosUptimeCap      int64    `protobuf:"varint,4,opt,name=kronos_uptime_cap,json=kronosUptimeCap,proto3" json:"kronos_uptime_cap,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OracleState) Reset()         { *m = OracleState{} }
func (m *OracleState) String() string { return proto.CompactTextString(m) }
func (*OracleState) ProtoMessage()    {}
func (*OracleState) Descriptor() ([]byte, []int) {
	return fileDescriptor_kronos_ba22e8fb849086dc, []int{1}
}
func (m *OracleState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OracleState.Unmarshal(m, b)
}
func (m *OracleState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OracleState.Marshal(b, m, deterministic)
}
func (dst *OracleState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleState.Merge(dst, src)
}
func (m *OracleState) XXX_Size() int {
	return xxx_messageInfo_OracleState.Size(m)
}
func (m *OracleState) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleState.DiscardUnknown(m)
}

var xxx_messageInfo_OracleState proto.InternalMessageInfo

func (m *OracleState) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OracleState) GetTimeCap() int64 {
	if m != nil {
		return m.TimeCap
	}
	return 0
}

func (m *OracleState) GetOracle() *NodeAddr {
	if m != nil {
		return m.Oracle
	}
	return nil
}

func (m *OracleState) GetKronosUptimeCap() int64 {
	if m != nil {
		return m.KronosUptimeCap
	}
	return 0
}

type OracleProposal struct {
	// Proposal to update the oracle
	ProposedState        *OracleState `protobuf:"bytes,1,opt,name=proposed_state,json=proposedState,proto3" json:"proposed_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *OracleProposal) Reset()         { *m = OracleProposal{} }
func (m *OracleProposal) String() string { return proto.CompactTextString(m) }
func (*OracleProposal) ProtoMessage()    {}
func (*OracleProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_kronos_ba22e8fb849086dc, []int{2}
}
func (m *OracleProposal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OracleProposal.Unmarshal(m, b)
}
func (m *OracleProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OracleProposal.Marshal(b, m, deterministic)
}
func (dst *OracleProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleProposal.Merge(dst, src)
}
func (m *OracleProposal) XXX_Size() int {
	return xxx_messageInfo_OracleProposal.Size(m)
}
func (m *OracleProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleProposal.DiscardUnknown(m)
}

var xxx_messageInfo_OracleProposal proto.InternalMessageInfo

func (m *OracleProposal) GetProposedState() *OracleState {
	if m != nil {
		return m.ProposedState
	}
	return nil
}

// Node stores the data of a single node that is persisted in cluster info on
// each node.
type Node struct {
	// raft_addr is the address of raft transport of the node.
	RaftAddr *NodeAddr `protobuf:"bytes,1,opt,name=raft_addr,json=raftAddr,proto3" json:"raft_addr,omitempty"`
	// is_removed is true for nodes which have been removed from the kronos raft
	// cluster. Removed node IDs cannot be added back to the cluster.
	IsRemoved            bool     `protobuf:"varint,2,opt,name=is_removed,json=isRemoved,proto3" json:"is_removed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_kronos_ba22e8fb849086dc, []int{3}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (dst *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(dst, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetRaftAddr() *NodeAddr {
	if m != nil {
		return m.RaftAddr
	}
	return nil
}

func (m *Node) GetIsRemoved() bool {
	if m != nil {
		return m.IsRemoved
	}
	return false
}

// Cluster stores the information about cluster that is persisted on each node.
type Cluster struct {
	// all_nodes is a map of NodeId -> Node metadata. This is the same id which is
	// used by raft.
	// This map contains both active nodes and nodes removed from the cluster.
	AllNodes             map[string]*Node `protobuf:"bytes,1,rep,name=all_nodes,json=allNodes,proto3" json:"all_nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Cluster) Reset()         { *m = Cluster{} }
func (m *Cluster) String() string { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()    {}
func (*Cluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_kronos_ba22e8fb849086dc, []int{4}
}
func (m *Cluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster.Unmarshal(m, b)
}
func (m *Cluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster.Marshal(b, m, deterministic)
}
func (dst *Cluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster.Merge(dst, src)
}
func (m *Cluster) XXX_Size() int {
	return xxx_messageInfo_Cluster.Size(m)
}
func (m *Cluster) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster proto.InternalMessageInfo

func (m *Cluster) GetAllNodes() map[string]*Node {
	if m != nil {
		return m.AllNodes
	}
	return nil
}

type OracleTimeRequest struct {
	// Node-id of the caller (optional, set if it is a memeber of the cluster)
	NodeId               string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OracleTimeRequest) Reset()         { *m = OracleTimeRequest{} }
func (m *OracleTimeRequest) String() string { return proto.CompactTextString(m) }
func (*OracleTimeRequest) ProtoMessage()    {}
func (*OracleTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_kronos_ba22e8fb849086dc, []int{5}
}
func (m *OracleTimeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OracleTimeRequest.Unmarshal(m, b)
}
func (m *OracleTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OracleTimeRequest.Marshal(b, m, deterministic)
}
func (dst *OracleTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleTimeRequest.Merge(dst, src)
}
func (m *OracleTimeRequest) XXX_Size() int {
	return xxx_messageInfo_OracleTimeRequest.Size(m)
}
func (m *OracleTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OracleTimeRequest proto.InternalMessageInfo

func (m *OracleTimeRequest) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type OracleTimeResponse struct {
	// time is the KronosTime of the oracle.
	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// rtt is the round-trip time for the rpc. this is actually filled on the
	// client side.
	Rtt int64 `protobuf:"varint,2,opt,name=rtt,proto3" json:"rtt,omitempty"`
	// time is the KronosUptime of the oracle.
	Uptime               int64    `protobuf:"varint,3,opt,name=uptime,proto3" json:"uptime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OracleTimeResponse) Reset()         { *m = OracleTimeResponse{} }
func (m *OracleTimeResponse) String() string { return proto.CompactTextString(m) }
func (*OracleTimeResponse) ProtoMessage()    {}
func (*OracleTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_kronos_ba22e8fb849086dc, []int{6}
}
func (m *OracleTimeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OracleTimeResponse.Unmarshal(m, b)
}
func (m *OracleTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OracleTimeResponse.Marshal(b, m, deterministic)
}
func (dst *OracleTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleTimeResponse.Merge(dst, src)
}
func (m *OracleTimeResponse) XXX_Size() int {
	return xxx_messageInfo_OracleTimeResponse.Size(m)
}
func (m *OracleTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OracleTimeResponse proto.InternalMessageInfo

func (m *OracleTimeResponse) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *OracleTimeResponse) GetRtt() int64 {
	if m != nil {
		return m.Rtt
	}
	return 0
}

func (m *OracleTimeResponse) GetUptime() int64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

type KronosTimeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KronosTimeRequest) Reset()         { *m = KronosTimeRequest{} }
func (m *KronosTimeRequest) String() string { return proto.CompactTextString(m) }
func (*KronosTimeRequest) ProtoMessage()    {}
func (*KronosTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_kronos_ba22e8fb849086dc, []int{7}
}
func (m *KronosTimeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KronosTimeRequest.Unmarshal(m, b)
}
func (m *KronosTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KronosTimeRequest.Marshal(b, m, deterministic)
}
func (dst *KronosTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KronosTimeRequest.Merge(dst, src)
}
func (m *KronosTimeRequest) XXX_Size() int {
	return xxx_messageInfo_KronosTimeRequest.Size(m)
}
func (m *KronosTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KronosTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KronosTimeRequest proto.InternalMessageInfo

type KronosTimeResponse struct {
	// time is the KronosTime
	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// time_cap is an upper bound to KronosTime. This is periodically updated by
	// the oracle. If the oracle goes down and no new oracle is elected, or if
	// quorum is lost in the cluster, time_cap is used to as a safety measure so
	// that clusters stop serving time. Any time greater than time_cap may not be
	// reliable and not close to actual KronosTime.
	TimeCap int64 `protobuf:"varint,2,opt,name=time_cap,json=timeCap,proto3" json:"time_cap,omitempty"`
	// rtt is the round-trip time for the rpc. this is actually filled on the
	// client side.
	Rtt                  int64    `protobuf:"varint,3,opt,name=rtt,proto3" json:"rtt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KronosTimeResponse) Reset()         { *m = KronosTimeResponse{} }
func (m *KronosTimeResponse) String() string { return proto.CompactTextString(m) }
func (*KronosTimeResponse) ProtoMessage()    {}
func (*KronosTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_kronos_ba22e8fb849086dc, []int{8}
}
func (m *KronosTimeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KronosTimeResponse.Unmarshal(m, b)
}
func (m *KronosTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KronosTimeResponse.Marshal(b, m, deterministic)
}
func (dst *KronosTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KronosTimeResponse.Merge(dst, src)
}
func (m *KronosTimeResponse) XXX_Size() int {
	return xxx_messageInfo_KronosTimeResponse.Size(m)
}
func (m *KronosTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KronosTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KronosTimeResponse proto.InternalMessageInfo

func (m *KronosTimeResponse) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *KronosTimeResponse) GetTimeCap() int64 {
	if m != nil {
		return m.TimeCap
	}
	return 0
}

func (m *KronosTimeResponse) GetRtt() int64 {
	if m != nil {
		return m.Rtt
	}
	return 0
}

type KronosUptimeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KronosUptimeRequest) Reset()         { *m = KronosUptimeRequest{} }
func (m *KronosUptimeRequest) String() string { return proto.CompactTextString(m) }
func (*KronosUptimeRequest) ProtoMessage()    {}
func (*KronosUptimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_kronos_ba22e8fb849086dc, []int{9}
}
func (m *KronosUptimeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KronosUptimeRequest.Unmarshal(m, b)
}
func (m *KronosUptimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KronosUptimeRequest.Marshal(b, m, deterministic)
}
func (dst *KronosUptimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KronosUptimeRequest.Merge(dst, src)
}
func (m *KronosUptimeRequest) XXX_Size() int {
	return xxx_messageInfo_KronosUptimeRequest.Size(m)
}
func (m *KronosUptimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KronosUptimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KronosUptimeRequest proto.InternalMessageInfo

type KronosUptimeResponse struct {
	// time is the KronosUptime. This is the time for which the Kronos server has
	// been live.
	Uptime int64 `protobuf:"varint,1,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// uptime_cap is an upper bound to KronosUptime. This is periodically updated by
	// the oracle. If the oracle goes down and no new oracle is elected, or if
	// quorum is lost in the cluster, uptime_cap is used to as a safety measure so
	// that clusters stop serving time. Any time greater than uptime_cap may not be
	// reliable and not close to actual KronosUptime.
	UptimeCap int64 `protobuf:"varint,2,opt,name=uptime_cap,json=uptimeCap,proto3" json:"uptime_cap,omitempty"`
	// rtt is the round-trip time for the rpc. this is actually filled on the
	// client side.
	Rtt                  int64    `protobuf:"varint,3,opt,name=rtt,proto3" json:"rtt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KronosUptimeResponse) Reset()         { *m = KronosUptimeResponse{} }
func (m *KronosUptimeResponse) String() string { return proto.CompactTextString(m) }
func (*KronosUptimeResponse) ProtoMessage()    {}
func (*KronosUptimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_kronos_ba22e8fb849086dc, []int{10}
}
func (m *KronosUptimeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KronosUptimeResponse.Unmarshal(m, b)
}
func (m *KronosUptimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KronosUptimeResponse.Marshal(b, m, deterministic)
}
func (dst *KronosUptimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KronosUptimeResponse.Merge(dst, src)
}
func (m *KronosUptimeResponse) XXX_Size() int {
	return xxx_messageInfo_KronosUptimeResponse.Size(m)
}
func (m *KronosUptimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KronosUptimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KronosUptimeResponse proto.InternalMessageInfo

func (m *KronosUptimeResponse) GetUptime() int64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *KronosUptimeResponse) GetUptimeCap() int64 {
	if m != nil {
		return m.UptimeCap
	}
	return 0
}

func (m *KronosUptimeResponse) GetRtt() int64 {
	if m != nil {
		return m.Rtt
	}
	return 0
}

type StatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusRequest) Reset()         { *m = StatusRequest{} }
func (m *StatusRequest) String() string { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()    {}
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_kronos_ba22e8fb849086dc, []int{11}
}
func (m *StatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusRequest.Unmarshal(m, b)
}
func (m *StatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusRequest.Marshal(b, m, deterministic)
}
func (dst *StatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRequest.Merge(dst, src)
}
func (m *StatusRequest) XXX_Size() int {
	return xxx_messageInfo_StatusRequest.Size(m)
}
func (m *StatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRequest proto.InternalMessageInfo

type StatusResponse struct {
	ServerStatus         ServerStatus `protobuf:"varint,1,opt,name=server_status,json=serverStatus,proto3,enum=kronospb.ServerStatus" json:"server_status,omitempty"`
	OracleState          *OracleState `protobuf:"bytes,2,opt,name=oracle_state,json=oracleState,proto3" json:"oracle_state,omitempty"`
	Delta                int64        `protobuf:"varint,3,opt,name=delta,proto3" json:"delta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_kronos_ba22e8fb849086dc, []int{12}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusResponse.Unmarshal(m, b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
}
func (dst *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(dst, src)
}
func (m *StatusResponse) XXX_Size() int {
	return xxx_messageInfo_StatusResponse.Size(m)
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetServerStatus() ServerStatus {
	if m != nil {
		return m.ServerStatus
	}
	return ServerStatus_NOT_INITIALIZED
}

func (m *StatusResponse) GetOracleState() *OracleState {
	if m != nil {
		return m.OracleState
	}
	return nil
}

func (m *StatusResponse) GetDelta() int64 {
	if m != nil {
		return m.Delta
	}
	return 0
}

func init() {
	proto.RegisterType((*NodeAddr)(nil), "kronospb.NodeAddr")
	proto.RegisterType((*OracleState)(nil), "kronospb.OracleState")
	proto.RegisterType((*OracleProposal)(nil), "kronospb.OracleProposal")
	proto.RegisterType((*Node)(nil), "kronospb.Node")
	proto.RegisterType((*Cluster)(nil), "kronospb.Cluster")
	proto.RegisterMapType((map[string]*Node)(nil), "kronospb.Cluster.AllNodesEntry")
	proto.RegisterType((*OracleTimeRequest)(nil), "kronospb.OracleTimeRequest")
	proto.RegisterType((*OracleTimeResponse)(nil), "kronospb.OracleTimeResponse")
	proto.RegisterType((*KronosTimeRequest)(nil), "kronospb.KronosTimeRequest")
	proto.RegisterType((*KronosTimeResponse)(nil), "kronospb.KronosTimeResponse")
	proto.RegisterType((*KronosUptimeRequest)(nil), "kronospb.KronosUptimeRequest")
	proto.RegisterType((*KronosUptimeResponse)(nil), "kronospb.KronosUptimeResponse")
	proto.RegisterType((*StatusRequest)(nil), "kronospb.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "kronospb.StatusResponse")
	proto.RegisterEnum("kronospb.ServerStatus", ServerStatus_name, ServerStatus_value)
}

func init() { proto.RegisterFile("kronos.proto", fileDescriptor_kronos_ba22e8fb849086dc) }

var fileDescriptor_kronos_ba22e8fb849086dc = []byte{
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xcb, 0x4e, 0xdb, 0x4c,
	0x18, 0xc5, 0x71, 0x08, 0xc9, 0xe7, 0x5c, 0xe0, 0xe3, 0x96, 0x3f, 0x7f, 0xa1, 0xc8, 0xea, 0x02,
	0xa1, 0x2a, 0x95, 0xdc, 0x2e, 0x50, 0x4b, 0x17, 0x94, 0xb2, 0x88, 0xa8, 0x42, 0x35, 0x40, 0x17,
	0x6c, 0x2c, 0x83, 0xa7, 0xd4, 0xc2, 0x64, 0xdc, 0x19, 0x1b, 0x89, 0xb7, 0xe8, 0xa2, 0xdb, 0x3e,
	0x45, 0x5f, 0xa2, 0xcb, 0x3e, 0x03, 0x4f, 0x52, 0xcd, 0xc5, 0xc9, 0x84, 0xdb, 0xee, 0xbb, 0x9f,
	0x93, 0x39, 0x27, 0x86, 0xe6, 0x25, 0x67, 0x23, 0x26, 0xfa, 0x19, 0x67, 0x39, 0xc3, 0xba, 0xce,
	0xb2, 0xb3, 0x1e, 0x5c, 0xb0, 0x0b, 0xa6, 0xab, 0x7e, 0x00, 0xf5, 0x21, 0x8b, 0xe9, 0x6e, 0x1c,
	0x73, 0x44, 0xa8, 0x7e, 0x63, 0x22, 0xef, 0x3a, 0x1b, 0xce, 0x66, 0x83, 0xa8, 0x58, 0xd6, 0x32,
	0xc6, 0xf3, 0x6e, 0x45, 0xd7, 0x64, 0xec, 0xff, 0x70, 0xc0, 0x3b, 0xe4, 0xd1, 0x79, 0x4a, 0x8f,
	0xf2, 0x28, 0xa7, 0xd8, 0x86, 0x4a, 0x12, 0xab, 0xad, 0x2a, 0xa9, 0x24, 0x31, 0xfe, 0x07, 0xf5,
	0x3c, 0xb9, 0xa2, 0xe1, 0x79, 0x94, 0xa9, 0x3d, 0x97, 0xcc, 0xc9, 0x7c, 0x2f, 0xca, 0x70, 0x0b,
	0x6a, 0x4c, 0x6d, 0x76, 0xdd, 0x0d, 0x67, 0xd3, 0x0b, 0xb0, 0x5f, 0xb2, 0xea, 0x97, 0x34, 0x88,
	0x99, 0xc0, 0x2d, 0x58, 0xd0, 0xcd, 0xb0, 0xc8, 0xc6, 0xf7, 0xaa, 0xea, 0x5e, 0x47, 0x37, 0x4e,
	0x32, 0x73, 0xd7, 0x1f, 0x42, 0x5b, 0x33, 0xfa, 0xcc, 0x59, 0xc6, 0x44, 0x94, 0xe2, 0x0e, 0xb4,
	0x33, 0x15, 0xd3, 0x38, 0x14, 0x92, 0xa6, 0x22, 0xe8, 0x05, 0xcb, 0x13, 0x44, 0xeb, 0x37, 0x90,
	0x56, 0x39, 0xac, 0x52, 0xff, 0x0b, 0x54, 0x25, 0x1f, 0x7c, 0x05, 0x0d, 0x1e, 0x7d, 0xcd, 0xc3,
	0x28, 0x8e, 0xb9, 0x39, 0xf0, 0x10, 0xe5, 0xba, 0x1c, 0x52, 0x6f, 0xb8, 0x06, 0x90, 0x88, 0x90,
	0xd3, 0x2b, 0x76, 0x4d, 0x63, 0xf5, 0xeb, 0xeb, 0xa4, 0x91, 0x08, 0xa2, 0x0b, 0xfe, 0x4f, 0x07,
	0xe6, 0xf6, 0xd2, 0x42, 0xe4, 0x94, 0xe3, 0x0e, 0x34, 0xa2, 0x34, 0x0d, 0x47, 0x2c, 0xa6, 0xa2,
	0xeb, 0x6c, 0xb8, 0x9b, 0x5e, 0xf0, 0x7c, 0x72, 0xdb, 0x4c, 0xf5, 0x77, 0xd3, 0x54, 0xc2, 0x88,
	0xfd, 0x51, 0xce, 0x6f, 0x48, 0x3d, 0x32, 0x69, 0xef, 0x00, 0x5a, 0x53, 0x2d, 0x9c, 0x07, 0xf7,
	0x92, 0xde, 0x18, 0xf1, 0x64, 0x88, 0x2f, 0x60, 0xf6, 0x3a, 0x4a, 0x0b, 0xaa, 0x68, 0x78, 0x41,
	0x7b, 0x9a, 0x38, 0xd1, 0xcd, 0xb7, 0x95, 0x6d, 0xc7, 0x7f, 0x09, 0x0b, 0xfa, 0x31, 0x8e, 0x93,
	0x2b, 0x4a, 0xe8, 0xf7, 0x82, 0x8a, 0x1c, 0x57, 0x61, 0x4e, 0x72, 0x0b, 0x8d, 0xb6, 0x0d, 0x52,
	0x93, 0xe9, 0x20, 0xf6, 0x09, 0xa0, 0x3d, 0x2d, 0x32, 0x36, 0x12, 0x54, 0x3a, 0x45, 0xaa, 0xa1,
	0x66, 0x5d, 0xa2, 0x62, 0xc9, 0x89, 0xe7, 0xb9, 0x31, 0x81, 0x0c, 0x71, 0x05, 0x6a, 0x5a, 0x4d,
	0x65, 0x00, 0x97, 0x98, 0xcc, 0x5f, 0x84, 0x85, 0x03, 0xc5, 0xce, 0x62, 0xe0, 0x9f, 0x00, 0xda,
	0xc5, 0x27, 0x80, 0x9e, 0xb0, 0x9c, 0xe1, 0xe0, 0x8e, 0x39, 0xf8, 0xcb, 0xb0, 0x78, 0x60, 0xf9,
	0xa7, 0x44, 0x0b, 0x61, 0x69, 0xba, 0x6c, 0xf0, 0x26, 0x94, 0x1d, 0x9b, 0xb2, 0x94, 0xda, 0x32,
	0xa6, 0x46, 0x6d, 0x14, 0xd9, 0xe3, 0xb8, 0x1d, 0x68, 0x49, 0x77, 0x15, 0xa2, 0x44, 0xfc, 0xe5,
	0x40, 0xbb, 0xac, 0x18, 0xb0, 0x77, 0xd0, 0x12, 0x94, 0x5f, 0x53, 0xae, 0x4c, 0x5b, 0x08, 0x85,
	0xd9, 0x0e, 0x56, 0x26, 0xda, 0x1d, 0xa9, 0xb6, 0x59, 0x6b, 0x0a, 0x2b, 0xc3, 0x6d, 0x68, 0xea,
	0xff, 0x8e, 0x71, 0x7c, 0xe5, 0x29, 0xc7, 0x7b, 0xcc, 0xfa, 0x0b, 0x2f, 0xc1, 0x6c, 0x4c, 0xd3,
	0x3c, 0x32, 0x74, 0x75, 0xb2, 0xf5, 0x06, 0x9a, 0x36, 0x1a, 0x2e, 0x42, 0x67, 0x78, 0x78, 0x1c,
	0x0e, 0x86, 0x83, 0xe3, 0xc1, 0xee, 0xa7, 0xc1, 0xe9, 0xfe, 0xc7, 0xf9, 0x19, 0xec, 0x80, 0x67,
	0x17, 0x9c, 0xe0, 0x77, 0x05, 0x3c, 0x29, 0x98, 0x5c, 0x4d, 0xce, 0x29, 0x0e, 0x00, 0x26, 0x76,
	0xc1, 0xff, 0xef, 0xb2, 0xb1, 0x04, 0xef, 0x3d, 0x7b, 0xb8, 0xa9, 0xdf, 0xc6, 0x9f, 0x91, 0xa7,
	0x26, 0x86, 0xb0, 0x4f, 0xdd, 0xf3, 0x8e, 0x7d, 0xea, 0xbe, 0x87, 0xfc, 0x19, 0x3c, 0x84, 0xa6,
	0xad, 0x36, 0xae, 0xdd, 0x9d, 0x9f, 0x32, 0x47, 0x6f, 0xfd, 0xb1, 0xf6, 0xf8, 0xe0, 0x7b, 0xa8,
	0x99, 0x67, 0x5a, 0xb5, 0xc4, 0xb2, 0xf5, 0xee, 0x75, 0xef, 0x37, 0xca, 0xf5, 0x0f, 0xf8, 0xe7,
	0x76, 0xdd, 0xf9, 0x7b, 0xbb, 0xee, 0x9c, 0x8e, 0x3f, 0xd4, 0x67, 0x35, 0xf5, 0x8d, 0x7e, 0xfd,
	0x2f, 0x00, 0x00, 0xff, 0xff, 0x78, 0xdf, 0x7d, 0xb1, 0xc9, 0x05, 0x00, 0x00,
}
